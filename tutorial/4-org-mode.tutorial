
#+TITLE: Org Mode
#+SUBTITLE: Tutorial


* What are Org files, anyways? 
*.org* is a special filetype used by Photon. These files offer powerful utilities, including document creation and formatting (similar to Word, Obsidian, and note-taking apps), table creation and data manipulation (similar to Excel), inline automatic equation preview using LaTeX syntax, and code workflow interaction (similar to Jupyter Notebooks).

That's a lot; and indeed, Org files are immensly powerful. Let's walk through some examples of what you can do with Org files to give you a sense of how you can use their power in your workflow.



* You've already used Org...
This tutorial is written directly in Org! You may have noticed special text formatting present, like coloured headers, document titles and subtitles, code blocks, *bold* and /italic/ text, and ~so~ +much+ =more=...

Note that everything in *.org* files is plaintext. Tables are generated using characters (like - | _ etc.), bullets are special characters, and highlighting/formatting is simply a visual property of the app. This means that *.org* files can be opened in ANY text editor (like Notepad on Windows, TextEdit for Mac, etc.) and the content will be readable.


** Formatting text
First, formatting text in Org is simple.
1. To make text *bold*, wrap it in asterisks ( * )
2. To make text /italic/, wrap it in backslashes ( / )
3. To make text =highlighted=, wrap it in equals signs ( = )
4. To give text ~code formatting~, wrap it in tildes ( ~ )

*Try it out!*
#+begin_exercise

Here's an example sentence. Try wrapping words in the above characters, and notice how they are formatted. Note that when your cursor moves away from the word, the formatting characters are hidden.


#+end_exercise


** Headers
You might notice that I have colourful, distinct headers in the tutorial like the one above. You can set a line as a header by starting it with asterisks ( * ). Starting a line with one asterisk makes it a level 1 header; two asterisks makes it level 2, and so on. Level 1 has the largest font size, and it decreases with each header level. Each header level also has a distinct colour.

For example:
* Lvl 1 headers are green
** Lvl 2 are blue
*** Lvl 3 are pink

*Try it out!*
-----
Below this line, try starting a line of text with an asterisk ( * ).


-----


** Lists
Lists are also intuitive!

To start a numbered list, begin a line with: 1.
To start a bulleted list, begin a line with: -

In either case, hit ~<ALT-ENTER>~ to continue the list. Photon will automatically recognize the "1. " or "- " and format the list properly.

#+begin_exercise

1. Here's the start of a list. Note that I started this sentence with "1."
2. Press ~<ALT-ENTER>~ with the cursor at the end of this line. Note how a new line of the list is created!

Now try making a bulleted list under here. Start a line with a dash ( - ), and press ~<ALT-ENTER>~ at the end of the line.

#+end_exercise


** Tables

Tables in Org are also extremely intuitive and elegant. To get a feel for it, follow along the instructions and create the demo table in the provided space below as you read!

*Try it out!*
#+begin_exercise

Start your table below with the vertical line provided:

  |

#+end_exercise

Columns are distinguished in Photon tables with vertical lines: |
Let's begin by creating a 2-column table of items and their prices. The first row will hold the column titles, specifically, "~| Item | Price |~". Type this out above.
Notice that as you begin typing, the text changes colour.

Photon automatically manages the formatting of your table and ensures it is neat. To automatically format our table and start a new line, press ~<TAB>~.

Let's make our next line a horizontal divider to separate the titles of our columns from the content in our table. This can be done by beginning a line with |- (a vertical line and a dash). Note that when you pressed ~<TAB>~, your cursor was automatically moved one-space away from the left edge of the table. You can press ~<backspace>~ to move your cursor back one character and then add a dash ( - ).

Now that your line begins with |- , press ~<TAB>~, and notice how a horizontal divider was created and your table was properly formatted!

Now, let's add some example data to our table. For this column, let's type "Ikea Bookshelf" in the "Item" column. Note that your formatting is a bit wonky since "Ikea Bookshelf" is much longer than "Item". No problem! Since you're done with the item name, just hit ~<TAB>~ and notice how the table will auto-format every time you press this key. Now that your cursor is under price, let's put $250.

Press ~<TAB>~ again to create another row. Put an item name and price of your choice. When you're done with the table, simply move your cursor out of it with standard ~<h/j/k/l>~ movement or by clicking your mouse pointer outside of the table.


Your final table should look something like:
| Item                 | Price |
|----------------------+-------|
| Ikea Bookshelf       | $250  |
| USB-C charging cable | $15   |

Org also offers ways to do calculations with data tables, similar to Excel or Google Sheets. However, this will optionally be covered later in the tutorial. As an example:

|----------------------+-----------|
| Item                 | Price ($) |
|----------------------+-----------|
| Ikea Bookshelf       |       250 |
| USB-C charging cable |        15 |
| Phone case           |        45 |
|----------------------+-----------|
| TOTAL                |       310 |
|----------------------+-----------|
#+TBLFM: @5$2=vsum(@2$2..@4$2)
(This formula outputs its result to the cell in row 5 column 2, and computes the sum of all cells from row 2 col 2 to row 4 col 2).


** Inline math formulas using LaTeX
LaTeX syntax for inline math is supported in Photon. Within any sentence, you can create a LaTeX formula by wrapping it in double dollar signs. As soon as you move your cursor outside of the signs, the formula will automatically render inline.

*Try it out!*
#+begin_exercise

Below, after the double dollar signs, begin writing a LaTeX equation. Try this equation for an integral involving a fraction:
~< \int_{0}^{10} \frac{1}{2} x^2 dx>~

$$

Make sure to close your equation with another set of double dollar signs. Note that as soon as you close the equation, it is auto previewed!

Hover your cursor over the equation by navigating with ~<h/j/k/l>~. Then, press ~<ENTER>~. Note that this removes the rendering of the equation, allowing you to go back and edit it. As soon as your cursor leaves the equation area, your LaTeX code will be rendered again.

#+end_exercise


** Keyboard macros for LaTeX
Photon offers a macro system to quickly write LaTeX. Let's start with a simple example.

*Try it out!*
#+begin_exercise

Let's try out a macro to write fractions in LaTeX.

Below this line, type "frac", then hit ~<TAB>~ (don't add a space before doing so).
-----



-----
Notice how this expands to ~\frac{numerator}{denominator}~. Your cursor is initially placed in the numerator position: try entering a number. Then, press ~<TAB>~ again, and notice how your cursor shifts to the denominator box. After entering something, press ~<TAB>~ again, and notice how it exits the fraction.

#+end_exercise

Photon offers many such macros. Another macro does the same for "int". Type =int= in the below box and hit ~<TAB>~; notice how the macro prompts you to initially select a type of integral, then cycles you through the bounds of the integral by pressing ~<TAB>~ again afterwards.

*Try it out!*
#+begin_exercise



#+end_exercise

Here is a list of all the default LaTeX macros shipped with Photon. Creating your own macros is easy, and will be covered later in the tutorial.
=WIP: This list is not yet ready.=


** Code blocks
Code blocks in Org begin with ~#+begin_src~ and end with ~#+end_src~.
The ~#+begin~ and ~#+end~ parts are hidden automatically to decrease visual clutter.

*Try it out!*
-----
Under this line, create a code block using the above syntax.



-----

Special properties for the block can be defined after ~#+begin_src~. The most important is the language; then you can set different properties for how the block evaluates the code inside. For the block you just created, let's set the language to be *Octave*, an open-source alternative to Matlab. *Octave* is perfect for doing quick calculations inside your documents, and it is compatible with *all Matlab syntax*. Any valid code in Matlab is valid in Octave.

Your starting line of the block should be the following: ~#+begin_src  octave~. Now, let's do a simple calculation. Add the following Matlab code to your block:
  ~x = 2;~
  ~y = zeros(5,2);~
  ~y(2,1) = 4;~
  ~y(4,2) = 7;~
  ~ans = y + x;~
/NOTE: Matlab code blocks in Org will always output the value of the ~ans~ variable. If no ~ans~ variable is defined, no value will be output./

Now, let's evaluate the calculation! Press ~<CTRL-ENTER>~ anywhere inside your code block to execute it. Note that the results are output directly below the source block, and since ~ans~ is a matrix, it is presented nicely as an Org table.

Octave is extremely useful for rapid in-document calculations. However, other languages, including Python and C, are also available if you prefer. Evaluate the below block with ~<CTRL-ENTER>~ to try it!

#+begin_src C
  #include <stdio.h>
  char curApp[] = "Photon's Org mode";
  printf("Hello! Nice to meet you! This C code is able to run in %s.", curApp);
#+end_src


** [Advanced, Optional]: Make Org elements talk to each other!
Here is a demonstration of an advanced feature in Org mode. It is purely for interest's sake, and to demonstrate the power of Org mode in a data analytics and programming environment.

You can give titles to tables and source blocks by adding a ~#+NAME:~ line above (remember, ~#+~ is hidden by default after being typed). This enables you to pass data between multiple tables/blocks, allowing you to pass variables between multiple programming languages!

Below is an example workflow to analyze and plot the data in an Org table.
This demo is not trying to teach the Octave/Python code in the source blocks, but rather to provide a quick demo of Org's potential.

Here's a table with some data:

#+NAME: table_1
|-----------+--------+-------|
| Object ID | Rating | Price |
|-----------+--------+-------|
|         1 |      6 |    30 |
|         2 |      8 |    25 |
|         3 |      4 |    42 |
|         4 |      1 |    19 |
|         5 |      3 |    34 |
|         6 |     10 |    53 |
|-----------+--------+-------|


Let's pass this table to an Octave code block, using the declaration ~:var data=table_1~.
This creates a variable in the Octave block called ~data~, and sets it to ~table_1~.

The below Octave code simply trims the table to the values in the 2nd and 3rd columns.
Press ~<CTRL-ENTER>~ in the below block to see its output.

/NOTE: ~:colnames yes~ tells Octave that the first row contains column names and thus should not be copied into the ~data~ variable./

#+NAME: octave_trim
#+begin_src octave :var data=table_1 :colnames yes 
  ans = data(:,2:3);
#+end_src


Let's now create a scatterplot of these two columns, with =Rating= on the x axis and =Price= on the y axis.
- We pass the output of the above block (~octave_trim~) to the variable ~trim_data~ using ~:var trim_data=octave_trim~.
- We'll create the graph with the very well-known Python library ~matplotlib~.
  
Press ~<CTRL-ENTER>~ in the below block to generate the graph.
/NOTE: ~plt.savefig('/tmp/org-demo.png)~ saves the graph to the temporary file/ ~/tmp/org-demo.png~

#+NAME: py_plot
#+begin_src python :var trim_data=octave_trim  :results output
  import matplotlib
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt

  x = [row[0] for row in trim_data]
  y = [row[1] for row in trim_data]

  plt.scatter(x, y)
  plt.xlabel('Rating')
  plt.xlim(0, 10.3)
  plt.ylabel('Price ($)')
  plt.title('Relationship between product rating and price')
  plt.savefig('/tmp/org-demo.png') # Save the figure to the given filename

  print("Plot succesfully created.")

#+end_src


Now, let's see the graph! Use the keybind ~<SPC d i>~ ~(Org document tools... -> [Re]display images)~ to display the image.

#+NAME: matplotlib-graph
[[file:/tmp/org-demo.png]]

/Note: if you are chaining together source blocks like so, you do not need to separately evaluate each block. You can simply ~<CTRL-ENTER>~ on the last block, and it will execute each block that it depends on in the background./

|------------|
| [[file:1.4.org][Next >]]     |
|------------|
| [[file:1.2.org][< Previous]] |
|------------|
